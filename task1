/* GOLD PRICE PREDICTION */

#import python libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

# Data collection and processing
# Get the actual filename after upload
from google.colab import files
uploaded = files.upload()

import pandas as pd
import io
data = pd.read_csv(io.BytesIO(uploaded['Gold.csv']))

# getting some basic information about the data
import pandas as pd
df=pd.read_csv('Gold.csv',na_values=('??,???'))
print(df.info())

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2547 entries, 0 to 2546
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   Date        2547 non-null   object 
 1   Close/Last  2547 non-null   float64
 2   Volume      2508 non-null   float64
 3   Open        2547 non-null   float64
 4   High        2547 non-null   float64
 5   Low         2547 non-null   float64
dtypes: float64(5), object(1)
memory usage: 119.5+ KB
None

 #print first 10 rows in the dataframe
print(data.head(10))

          Date  Close/Last    Volume    Open    High     Low
0   10/28/2022      1648.3  186519.0  1667.2  1670.9  1640.7
1   10/27/2022      1668.8  180599.0  1668.8  1674.8  1658.5
2   10/26/2022      1669.2  183453.0  1657.7  1679.4  1653.8
3   10/25/2022      1658.0  178706.0  1654.5  1666.8  1641.2
4   10/24/2022      1654.1  167448.0  1662.9  1675.5  1648.0
5   10/21/2022      1656.3  265985.0  1632.4  1663.1  1621.1
6   10/20/2022      1636.8  159797.0  1634.6  1650.3  1626.3
7   10/19/2022      1634.2  172551.0  1657.2  1659.8  1632.2
9   10/17/2022      1664.0  144374.0  1649.9  1674.3  1649.1
12  10/12/2022      1677.5  127689.0  1673.4  1685.1  1668.0

# the columns in the dataset
print(data.columns)

# Drop missing values or handle them appropriately
data = data.dropna()

# getting the statistical measures of the data
print(data.describe())
        Close/Last         Volume         Open         High          Low
count  2508.000000    2508.000000  2508.000000  2508.000000  2508.000000
mean   1438.936164  182067.668660  1439.127552  1448.610526  1429.120853
std     256.487316   97589.342619   256.831389   258.485303   254.250367
min    1049.600000       1.000000  1051.500000  1062.700000  1045.400000
25%    1244.075000  120901.000000  1243.900000  1251.500000  1235.800000
50%    1318.950000  168425.500000  1319.700000  1327.300000  1311.150000
75%    1705.200000  231754.000000  1707.125000  1718.100000  1687.525000
max    2069.400000  787217.000000  2076.400000  2082.100000  2049.000000

# Check the distribution of the 'Volume' column
print(data['Volume'].value_counts())

# Fill missing values in the 'Volume' column with the mode (most frequent value)
data['Volume'].fillna(data['Volume'].mode()[0], inplace=True)

# Check for any remaining missing values in the dataset
missing_values = data.isna().sum()
print(missing_values)
#Cheking for null values of each column

Volume
1.0         4
6.0         3
210181.0    2
5260.0      2
135811.0    2
           ..
511767.0    1
320720.0    1
364839.0    1
230833.0    1
110928.0    1
Name: count, Length: 2484, dtype: int64
Date          0
Close/Last    0
Volume        0
Open          0
High          0
Low           0
dtype: int64

import pandas as pd
d1={'city':['Mangalore','Bangalore','Mysore'],'temp':[35,30,9]}
d2={'city':['Mangalore','Bangalore','Mysore'],'humidity':[60,40,30]}
df1=pd.DataFrame(d1)
df2=pd.DataFrame(d2)
print(df1)
print(df2)

        city  temp
0  Mangalore    35
1  Bangalore    30
2     Mysore     9
        city  humidity
0  Mangalore        60
1  Bangalore        40
2     Mysore        30

# ScatterPlot
import matplotlib.pyplot as plt

plt.scatter(data['Open'], data['Close/Last'])
plt.title('Scatter Plot of Open vs. Close Prices')
plt.xlabel('Open Price')
plt.ylabel('Close/Last Price')
plt.show()

#SineWave
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y)
plt.title('Sine Wave')
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.show()

# BarPlot
plt.figure(figsize=(10,5))
plt.bar(data['Date'], data['Volume'])
plt.title('Trading Volume Over Time')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.xticks(rotation=45)
plt.show()

# Histogram
plt.hist(data['Close/Last'], bins=20)
plt.title('Histogram of Closing Prices')
plt.xlabel('Close/Last Price')
plt.ylabel('Frequency')
plt.show()

# Define categories based on closing price ranges
price_ranges = pd.cut(data['Close/Last'], bins=[1600, 1650, 1700, 1750], labels=['1600-1650', '1650-1700', '1700-1750'])

# Count the occurrences of each category
range_counts = price_ranges.value_counts()

# Plot the pie chart
plt.pie(range_counts, labels=range_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Closing Prices')
plt.show()
